import {
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Stack,
  TextField,
  MenuItem,
  Select,
  InputLabel,
  FormControl,
} from "@mui/material";
import React, { useState, useEffect } from "react";
import AppointmentService from "../../services/AppointmentService";
import { getStaff, createGuest } from "../../services/UserService"; // Import h√†m l·∫•y danh s√°ch nh√¢n vi√™n
import ServiceService from "../../services/Serviceservice"; // ‚úÖ ƒê√öNG

const AppointmentAdd = ({ open, onClose, onSuccess }) => {
  const [appointmentData, setAppointmentData] = useState({
    appointmentDate: "",
    customerId: "",
    staffId: "",
    serviceId: "",
    notes: "",
    status: 0, // Default status is Pending (0)
  });
  const [staffList, setStaffList] = useState([]);
  const [serviceList, setServiceList] = useState([]);
  const [isGuest, setIsGuest] = useState(false); // Th√™m bi·∫øn tr·∫°ng th√°i x√°c ƒë·ªãnh kh√°ch v√£n lai
  const [guestData, setGuestData] = useState({
    phone: "",
    fullName: "",
  });

  // L·∫•y danh s√°ch nh√¢n vi√™n khi component ƒë∆∞·ª£c render
  useEffect(() => {
    const fetchStaff = async () => {
      try {
        const staffData = await getStaff();
        setStaffList(staffData); // L∆∞u v√†o state staffList
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch nh√¢n vi√™n:", error);
      }
    };

    fetchStaff();
  }, []);

  // L·∫•y danh s√°ch d·ªãch v·ª• khi component ƒë∆∞·ª£c render
  useEffect(() => {
    const getAllService = async () => {
      try {
        const response = await ServiceService.getAll();
        console.log("D·ªØ li·ªáu tr·∫£ v·ªÅ:", response); // Ki·ªÉm tra c·∫•u tr√∫c response

        const services = response.data?.$values || response.data; // T√πy theo API c·ªßa b·∫°n
        if (!services || services.length === 0) {
          alert("Kh√¥ng c√≥ d·ªãch v·ª• n√†o.");
        } else {
          setServiceList(services);
        }
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª•:", error);
        alert("L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª•.");
      }
    };

    getAllService();
  }, []);

  // X·ª≠ l√Ω thay ƒë·ªïi c·ªßa c√°c tr∆∞·ªùng input
  const handleChange = (e) => {
    const { name, value } = e.target;
    setAppointmentData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // X·ª≠ l√Ω thay ƒë·ªïi c·ªßa c√°c tr∆∞·ªùng input trong form kh√°ch v√£ng lai
  const handleGuestChange = (e) => {
    const { name, value } = e.target;
    setGuestData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn "Kh√°ch v√£n lai"
  const handleGuestSelection = async () => {
    if (guestData.phone && guestData.fullName) {
      try {
        const guest = { 
          phone: guestData.phone, 
          fullName: guestData.fullName 
        };

        // Ki·ªÉm tra xem kh√°ch v√£ng lai ƒë√£ t·ªìn t·∫°i ch∆∞a
        let existingGuest = await createGuest(guest);

        if (!existingGuest) {
          // N·∫øu kh√¥ng t√¨m th·∫•y kh√°ch v√£ng lai, t·∫°o m·ªõi
          existingGuest = await createGuest(guest);
        }

        if (existingGuest) {
          setAppointmentData((prev) => ({
            ...prev,
            customerId: existingGuest.id, // C·∫≠p nh·∫≠t customerId t·ª´ ph·∫£n h·ªìi
          }));
          setIsGuest(true); // ƒê√°nh d·∫•u l√† kh√°ch v√£ng lai
        } else {
          alert("Kh√¥ng th·ªÉ t·∫°o kh√°ch v√£ng lai.");
        }
      } catch (error) {
        console.error("L·ªói khi t·∫°o kh√°ch v√£ng lai:", error);
        alert("L·ªói khi t·∫°o kh√°ch v√£ng lai. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } else {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß s·ªë ƒëi·ªán tho·∫°i v√† t√™n kh√°ch v√£ng lai.");
    }
  };

  // H√†m g·ª≠i d·ªØ li·ªáu t·∫°o l·ªãch h·∫πn
  const handleSubmit = async () => {
    if (!appointmentData.appointmentDate || !appointmentData.staffId || !appointmentData.serviceId) {
      alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.");
      return;
    }

    console.log("D·ªØ li·ªáu l·ªãch h·∫πn g·ª≠i ƒëi:", appointmentData); // üëâ Xem d·ªØ li·ªáu t·∫°i ƒë√¢y

    try {
      await AppointmentService.create(appointmentData);
      onSuccess();
      onClose();
    } catch (error) {
      alert("L·ªói khi th√™m l·ªãch h·∫πn. Vui l√≤ng th·ª≠ l·∫°i.");
      console.error("L·ªói khi th√™m l·ªãch h·∫πn:", error);
    }
  };

  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>Th√™m l·ªãch h·∫πn</DialogTitle>
      <DialogContent>
        <Stack spacing={2}>
          <TextField
            label="Ng√†y gi·ªù"
            type="datetime-local"
            fullWidth
            name="appointmentDate"
            value={appointmentData.appointmentDate}
            onChange={handleChange}
            InputLabelProps={{
              shrink: true,
            }}
          />
          <TextField
            label="Kh√°ch h√†ng"
            fullWidth
            name="customerId"
            value={appointmentData.customerId}
            onChange={handleChange}
            disabled={isGuest} // N·∫øu l√† kh√°ch v√£n lai, kh√¥ng cho ch·ªânh s·ª≠a
          />
          {!isGuest && (
            <>
              <TextField
                label="T√™n kh√°ch v√£ng lai"
                fullWidth
                name="fullName"
                value={guestData.fullName}
                onChange={handleGuestChange}
              />
              <TextField
                label="S·ªë ƒëi·ªán tho·∫°i kh√°ch v√£ng lai"
                fullWidth
                name="phone"
                value={guestData.phone}
                onChange={handleGuestChange}
              />
              <Button variant="contained" onClick={handleGuestSelection}>
                T·∫°o kh√°ch v√£ng lai
              </Button>
            </>
          )}
          <FormControl fullWidth>
            <InputLabel>Nh√¢n vi√™n</InputLabel>
            <Select
              name="staffId"
              value={appointmentData.staffId}
              onChange={handleChange}
              label="Nh√¢n vi√™n"
            >
              {staffList.map((staff) => (
                <MenuItem key={staff.id} value={staff.id}>
                  {staff.fullName}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          <TextField
            select
            label="D·ªãch v·ª•"
            fullWidth
            name="serviceId"
            value={appointmentData.serviceId}
            onChange={handleChange}
          >
            {serviceList.map((service) => (
              <MenuItem key={service.id} value={service.id}>
                {service.name}
              </MenuItem>
            ))}
          </TextField>
          <TextField
            label="Ghi ch√∫"
            fullWidth
            name="notes"
            value={appointmentData.notes}
            onChange={handleChange}
            multiline
            rows={4}
          />
          <FormControl fullWidth>
            <InputLabel>Tr·∫°ng th√°i</InputLabel>
            <Select
              name="status"
              value={appointmentData.status}
              onChange={handleChange}
              label="Tr·∫°ng th√°i"
            >
              <MenuItem value={0}>Ch·ªù duy·ªát</MenuItem>
              <MenuItem value={1}>ƒê√£ nh·∫≠n l·ªãch</MenuItem>
              <MenuItem value={2}>ƒêang th·ª±c hi·ªán</MenuItem>
              <MenuItem value={3}>ƒê√£ ho√†n th√†nh</MenuItem>
            </Select>
          </FormControl>
        </Stack>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} color="primary">
          H·ªßy
        </Button>
        <Button onClick={handleSubmit} color="primary">
          Th√™m l·ªãch h·∫πn
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default AppointmentAdd;
